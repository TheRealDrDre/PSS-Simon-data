setwd("~/GitHub/PSS-Simon-data")
source('~/GitHub/PSS-Simon-data/analyze_pss_simon.R')
comp
source('~/GitHub/PSS-Simon-data/analyze_pss_simon.R')
source('~/GitHub/PSS-Simon-data/analyze_pss_simon.R')
source('~/GitHub/PSS-Simon-data/analyze_pss_simon.R')
comp
newsims <- subset(newsims, newsims$Alpha == 0.3 & newsims$EGS = 0.0 & newsims$ANS = 0.2 & newsims$LF = 0.25 & newsims$Bias = 4)
newsims <- subset(newsims, newsims$Alpha == 0.3 & newsims$EGS == 0.0 & newsims$ANS = 0.2 & newsims$LF = 0.25 & newsims$Bias = 4)
newsims <- subset(newsims, newsims$Alpha == 0.3 &
newsims$EGS == 0.0 &
newsims$ANS == 0.2 &
newsims$LF == 0.25 &
newsims$Bias == 4)
newsims
oldcomp <- comp
newsims <- read.table("final.txt")
newsims <- subset(newsims, newsims$Alpha == 0.3 &
newsims$EGS == 0.0 &
newsims$ANS == 0.2 &
newsims$LF == 0.25 &
newsims$Bias == 4)
newsims
oldcomp <- comp
newsims <- read.table("final.txt")
names(newsims) <- c("Alpha", "LF", "EGS", "ANS", "Bias", "D1", "D2", "Con_ACC", "Con_RT", "Incon_ACC", "Incon_RT")
newsims <- subset(newsims, newsims$Alpha == 0.3 &
newsims$EGS == 0.0 &
newsims$ANS == 0.2 &
newsims$LF == 0.25 &
newsims$Bias == 4)
newsims
oldcomp <- comp
newsims <- read.table("final.txt")
names(newsims) <- c("Alpha", "LF", "EGS", "ANS", "Bias", "D1", "D2", "Con_ACC", "Con_RT", "Incon_ACC", "Incon_RT")
unique(newsims$Alpha)
unique(newsims$EGS)
unique(newsims$ANS)
unique(newsims$LF)
unique(newsims$Bias)
newsims <- subset(newsims, newsims$Alpha == 0.3 &
newsims$EGS == 0.0 &
newsims$ANS == 0.2 &
newsims$LF == 0.25 &
newsims$Bias == 4.0)
newsims <- read.table("final.txt")
names(newsims) <- c("Alpha", "LF", "EGS", "ANS", "Bias", "D1", "D2", "Con_ACC", "Con_RT", "Incon_ACC", "Incon_RT")
newsims <- subset(newsims, newsims$Alpha == 0.3 &
newsims$EGS == 0.0 &
newsims$ANS == 0.2 &
newsims$LF == 0.25 &
newsims$Bias == 4.0)
newsims
sub <- subset(newsims, newsims$Alpha == 0.3 &
newsims$EGS == 0.0 &
newsims$ANS == 0.2 &
newsims$LF == 0.25 &
newsims$Bias == 4.0)
newsims <- read.table("final.txt")
names(newsims) <- c("Alpha", "LF", "EGS", "ANS", "Bias", "D1", "D2", "Con_ACC", "Con_RT", "Incon_ACC", "Incon_RT")
sub <- subset(newsims, newsims$Alpha == 0.3 &
newsims$EGS == 0.0 &
newsims$ANS == 0.2 &
newsims$LF == 0.25 &
newsims$Bias == 4.0)
sub
newsims <- read.table("final.txt")
sub <- subset(newsims, newsims$Alpha == 0.3
)
sub
newsims <- read.table("final.txt")
names(newsims) <- c("Alpha", "LF", "EGS", "ANS", "Bias", "D1", "D2", "Con_ACC", "Con_RT", "Incon_ACC", "Incon_RT")
namess(newsims)
names(newsims)
sub <- subset(newsims, newsims$Alpha == 0.3 &
newsims$EGS == 0.0 &
newsims$ANS == 0.2 &
newsims$LF == 0.25 &
newsims$Bias == 4.0)
sub
sub <- subset(newsims, newsims$Alpha == 0.3
)
sub
newsims$Alpha
oldcomp <- comp
newsims <- read.table("final.txt", sep=",")
names(newsims) <- c("Alpha", "LF", "EGS", "ANS", "Bias", "D1", "D2", "Con_ACC", "Con_RT", "Incon_ACC", "Incon_RT")
sub <- subset(newsims, newsims$Alpha == 0.3 &
newsims$EGS == 0.0 &
newsims$ANS == 0.2 &
newsims$LF == 0.25 &
newsims$Bias == 4.0)
sub
zsims <- subset(newsims, newsims$Alpha == 0.3 &
newsims$EGS == 0.0 &
newsims$ANS == 0.2 &
newsims$LF == 0.25 &
newsims$Bias == 4.0)
zsims
aggregate(zsims[c("Incon_RT", "Con_RT")], list(), mean
)
aggregate(zsims[c("Incon_RT", "Con_RT")], list(zsims$Alpha), mean)
zsims <- subset(newsims, newsims$Alpha == 0.3 &
newsims$EGS == 0.0 &
newsims$ANS == 0.2 &
newsims$LF == 0.25 &
newsims$Bias == 4.0 &
newsims$D1 == 1 &
newsims$D2 == 1)
zsims
names(comp)
model_1 <- zsims[c("Con_RT", "Con_ACC")]
model_1$Condition <- "Congruent"
names(model_1)[1] <- "Latency"
names(model_1)[2] <- "Accuracy"
model_2 <- zsims[c("Incon_RT", "Incon_ACC")]
model_2$Condition <- "Incongruent"
names(model_2)[1] <- "Latency"
names(model_2)[2] <- "Accuracy"
model_comp <- merge(model_1, model_2, all=T)
names(model_comp)[3] <- "Subject"
model_comp$Source <- "Model"
model_comp
comp <- subset(comp, comp$Source != "Model")
comp <- merge(comp, model_comp, all=T)
comp
paratu()
model_1 <- zsims[c("Con_RT", "Con_ACC")]
model_1$Condition <- "Congruent"
names(model_1)[1] <- "Latency"
names(model_1)[2] <- "Accuracy"
model_2 <- zsims[c("Incon_RT", "Incon_ACC")]
model_2$Condition <- "Incongruent"
names(model_2)[1] <- "Latency"
names(model_2)[2] <- "Accuracy"
model_comp <- merge(model_1, model_2, all=T)
names(model_comp)[3] <- "Subject"
model_comp$Source <- "Model"
model_comp$Latency <- model_comp$Latency * 1000
model_comp
model_1 <- zsims[c("Con_RT", "Con_ACC")]
model_1
model_1$Condition <- "Congruent"
model_1
names(model_1)[1] <- "Latency"
names(model_1)[2] <- "Accuracy"
model_1
model_2 <- zsims[c("Incon_RT", "Incon_ACC")]
model_2$Condition <- "Incongruent"
names(model_2)[1] <- "Latency"
names(model_2)[2] <- "Accuracy"
model_2
model_comp <- merge(model_1, model_2, all=T)
model_comp$Source <- "Model"
model_comp$Latency <- model_comp$Latency * 1000
comp <- subset(comp, comp$Source != "Model")
comp <- merge(comp, model_comp, all=T)
paratu()
zsims <- subset(newsims, newsims$Alpha == 0.3 &
newsims$EGS == 0.0 &
newsims$ANS == 0.2 &
newsims$LF == 0.25 &
newsims$Bias == 4.0)
model_1 <- zsims[c("Con_RT", "Con_ACC")]
model_1$Condition <- "Congruent"
names(model_1)[1] <- "Latency"
names(model_1)[2] <- "Accuracy"
model_2 <- zsims[c("Incon_RT", "Incon_ACC")]
model_2$Condition <- "Incongruent"
names(model_2)[1] <- "Latency"
names(model_2)[2] <- "Accuracy"
model_comp <- merge(model_1, model_2, all=T)
model_comp$Source <- "Model"
model_comp$Latency <- model_comp$Latency * 1000
comp <- subset(comp, comp$Source != "Model")
comp <- merge(comp, model_comp, all=T)
paratu()
model_comp
zsims <- subset(newsims, newsims$Alpha == 0.3 &
newsims$EGS == 0.0 &
newsims$ANS == 0.2 &
newsims$LF == 0.25 &
newsims$Bias == 4.0)
model_1 <- zsims[c("Con_RT", "Con_ACC")]
model_1$Condition <- "Congruent"
names(model_1)[1] <- "Latency"
names(model_1)[2] <- "Accuracy"
model_2 <- zsims[c("Incon_RT", "Incon_ACC")]
model_2$Condition <- "Incongruent"
names(model_2)[1] <- "Latency"
names(model_2)[2] <- "Accuracy"
model_comp
model_comp <- merge(model_1, model_2, all=T)
model_comp$Source <- "Model"
model_comp$Latency <- model_comp$Latency * 1000
comp <- subset(comp, comp$Source != "Model")
comp <- merge(comp, model_comp, all=T)
paratu()
zsims <- subset(newsims, newsims$Alpha == 0.3 &
newsims$EGS == 0.0 &
newsims$ANS == 0.2 &
newsims$LF == 0.25 &
newsims$Bias == 4.0 &
newsims$D1 == 1.0 &
newsims$D2 == 1.0)
model_1 <- zsims[c("Con_RT", "Con_ACC")]
model_1$Condition <- "Congruent"
names(model_1)[1] <- "Latency"
names(model_1)[2] <- "Accuracy"
model_2 <- zsims[c("Incon_RT", "Incon_ACC")]
model_2$Condition <- "Incongruent"
names(model_2)[1] <- "Latency"
names(model_2)[2] <- "Accuracy"
model_comp <- merge(model_1, model_2, all=T)
model_comp$Source <- "Model"
model_comp$Latency <- model_comp$Latency * 1000
comp <- subset(comp, comp$Source != "Model")
comp <- merge(comp, model_comp, all=T)
paratu()
rt.diff <- tapply(comp$Latency, list(comp$Condition, comp$Source), mean)
sqrt(mean((rt.diff[,1] - rt.diff[,2])**2))
acc.diff <- tapply(comp$Accuracy, list(comp$Condition, comp$Source), mean)
sqrt(mean((acc.diff[,1] - acc.diff[,2])**2))
chisq.test(200 * acc.diff)
rt.var <- tapply(comp$Latency, list(comp$Condition, comp$Source), var)
X2 <- sum(((rt.diff[,1] - rt.diff[,2]) ** 2) / (rt.var[,1] ** 2))
1 - pchisq(X2,1)
X2
t.test(asin(sqrt(Accuracy)) ~ Condition, simon_data, paired=T)
